{"version":3,"file":"chutney.js","sources":["../dist/static/index.js","../dist/pages/index.js","../dist/index.js","../dist/data/index.js","../dist/components/index.js","../dist/sitemap/index.js"],"sourcesContent":["import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nasync function copyDir(src, dest) {\r\n    await fs.mkdir(dest, { recursive: true });\r\n    const entries = await fs.readdir(src, { withFileTypes: true });\r\n    for (const entry of entries) {\r\n        const srcPath = path.join(src, entry.name);\r\n        const destPath = path.join(dest, entry.name);\r\n        entry.isDirectory()\r\n            ? await copyDir(srcPath, destPath)\r\n            : await fs.copyFile(srcPath, destPath);\r\n    }\r\n}\r\nasync function moveStaticFiles() {\r\n    await copyDir(\"./public\", \"./dist\");\r\n}\r\nexport default moveStaticFiles;\r\n//# sourceMappingURL=index.js.map","import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport Handlebars from \"handlebars\";\r\nimport { unified } from \"unified\";\r\nimport remarkParse from \"remark-parse\";\r\nimport remarkFrontmatter from \"remark-frontmatter\";\r\nimport remarkRehype from \"remark-rehype\";\r\nimport remarkParseYaml from \"remark-parse-yaml\";\r\nimport rehypeStringify from \"rehype-stringify\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nconst pagesDir = \"./src/pages/\";\r\nconst layoutDir = \"./src/layouts/\";\r\nconst distDir = \"./dist/\";\r\nlet allData = {};\r\nasync function registerPages(data) {\r\n    allData = data;\r\n    return await processDir(pagesDir);\r\n}\r\nasync function processDir(directory) {\r\n    const pages = [];\r\n    try {\r\n        const files = await fs.readdir(directory);\r\n        const outputDirectory = `${distDir}${directory.replace(pagesDir, \"\")}`;\r\n        // Check to see if the directory exists and create if not.\r\n        try {\r\n            await fs.readdir(outputDirectory);\r\n        }\r\n        catch (err) {\r\n            await fs.mkdir(outputDirectory);\r\n        }\r\n        for (const file of files) {\r\n            const { ext } = path.parse(file);\r\n            if (ext) {\r\n                const page = await fs.readFile(`${directory}${file}`, \"utf-8\");\r\n                let frontmatter = {};\r\n                const rawPage = await unified()\r\n                    .use(remarkParse)\r\n                    .use(remarkFrontmatter)\r\n                    .use(remarkParseYaml)\r\n                    .use(() => (tree) => {\r\n                    const yaml = tree.children.find((f) => f.type == \"yaml\");\r\n                    if (yaml && yaml.data) {\r\n                        frontmatter = yaml.data.parsedValue;\r\n                    }\r\n                    return tree;\r\n                })\r\n                    .use(remarkRehype, { allowDangerousHtml: true })\r\n                    .use(rehypeRaw)\r\n                    .use(rehypeStringify)\r\n                    .process(page);\r\n                let layoutFileName = frontmatter.layout || \"default\";\r\n                let html = \"\";\r\n                try {\r\n                    html = await fs.readFile(`${layoutDir}${layoutFileName}.html`, \"utf-8\");\r\n                }\r\n                catch (err) { }\r\n                const chutneyContent = String(rawPage);\r\n                html = html.replace(\"{{chutneyPage}}\", chutneyContent);\r\n                const template = Handlebars.compile(html);\r\n                let route = \"\";\r\n                if (file.includes(\"[\")) {\r\n                    const dataProp = outputDirectory.split(\"/\").slice(-2)[0];\r\n                    const prop = file.replace(ext, \"\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n                    const sourceData = allData[dataProp];\r\n                    if (sourceData && Array.isArray(sourceData)) {\r\n                        for (const data of sourceData) {\r\n                            const result = template({ ...allData, ...data });\r\n                            const pathValue = getPropValue(data, prop);\r\n                            try {\r\n                                await fs.readdir(`${outputDirectory}${pathValue}/`);\r\n                            }\r\n                            catch (err) {\r\n                                await fs.mkdir(`${outputDirectory}${pathValue}/`);\r\n                            }\r\n                            await fs.writeFile(`${outputDirectory}${pathValue}/index.html`, result);\r\n                            route = `${outputDirectory}${pathValue}`;\r\n                            console.log(frontmatter);\r\n                            pages.push({\r\n                                title: data.title || frontmatter.title,\r\n                                description: data.description || frontmatter.description || \"\",\r\n                                publishedAt: new Date(data.publishedAt || frontmatter.publishedAt || new Date()),\r\n                                route: `/${route.replace(distDir, \"\")}/`,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const result = template({ ...allData });\r\n                    if (file.replace(ext, \"\").toLocaleLowerCase() !== \"index\") {\r\n                        try {\r\n                            await fs.readdir(`${outputDirectory}${file.replace(ext, \"\")}/`);\r\n                        }\r\n                        catch (err) {\r\n                            await fs.mkdir(`${outputDirectory}${file.replace(ext, \"\")}/`);\r\n                        }\r\n                        await fs.writeFile(`${outputDirectory}${file.replace(ext, \"\")}/index.html`, result);\r\n                        route = `${outputDirectory}${file.replace(ext, \"\")}/`;\r\n                    }\r\n                    else {\r\n                        await fs.writeFile(`${outputDirectory}index.html`, result);\r\n                        route = `${outputDirectory}`;\r\n                    }\r\n                    pages.push({\r\n                        title: frontmatter.title,\r\n                        description: frontmatter.description,\r\n                        publishedAt: frontmatter.publishedAt || new Date(),\r\n                        route: `/${route.replace(distDir, \"\")}`,\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                pages.push(...(await processDir(`${directory}${file}/`)));\r\n            }\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n        console.log(\"No pages found.\");\r\n    }\r\n    return pages;\r\n}\r\nfunction getPropValue(data, prop) {\r\n    const steps = prop.split(\".\");\r\n    let value = data;\r\n    while (steps.length > 0) {\r\n        value = value[steps[0]];\r\n        steps.splice(0, 1);\r\n    }\r\n    return value;\r\n}\r\nexport default registerPages;\r\n//# sourceMappingURL=index.js.map","import handleStaticFiles from \"./static/index.js\";\r\nimport handlePages from \"./pages/index.js\";\r\nimport handleComponents from \"./components/index.js\";\r\nimport handleData from \"./data/index.js\";\r\nimport handleSitemap from \"./sitemap/index.js\";\r\nexport default async function chutney() {\r\n    // Get data to be used across the entire site.\r\n    const data = await handleData();\r\n    await handleComponents();\r\n    const pages = await handlePages(data);\r\n    await handleSitemap(pages);\r\n    await handleStaticFiles();\r\n}\r\n//# sourceMappingURL=index.js.map","import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nconst dataDir = \"./src/data/\";\r\nasync function gatherData() {\r\n    const data = {};\r\n    try {\r\n        const dataFiles = await fs.readdir(dataDir);\r\n        for (const file of dataFiles) {\r\n            const { ext } = path.parse(file);\r\n            const dataFunc = (await import(`file://${path.resolve(dataDir)}/${file}`))\r\n                .default;\r\n            data[file.replace(ext, \"\")] = await dataFunc();\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(\"No data found.\");\r\n    }\r\n    return data;\r\n}\r\nexport default gatherData;\r\n//# sourceMappingURL=index.js.map","import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport Handlebars from \"handlebars\";\r\nimport { unified } from \"unified\";\r\nimport remarkParse from \"remark-parse\";\r\nimport remarkFrontmatter from \"remark-frontmatter\";\r\nimport remarkRehype from \"remark-rehype\";\r\nimport rehypeStringify from \"rehype-stringify\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nconst snippetDir = \"./src/components/\";\r\nasync function registerHelpers() {\r\n    try {\r\n        const files = await fs.readdir(snippetDir);\r\n        for (const file of files) {\r\n            const { ext } = path.parse(file);\r\n            const raw = await fs.readFile(`${snippetDir}${file}`, \"utf-8\");\r\n            const rawHtmlFile = await unified()\r\n                .use(remarkParse)\r\n                .use(remarkFrontmatter)\r\n                .use(remarkRehype, { allowDangerousHtml: true })\r\n                .use(rehypeRaw)\r\n                .use(rehypeStringify)\r\n                .process(raw);\r\n            const html = String(rawHtmlFile);\r\n            Handlebars.registerHelper(file.replace(ext, \"\"), (data) => {\r\n                const template = Handlebars.compile(html);\r\n                const renderedContent = template(data);\r\n                return new Handlebars.SafeString(renderedContent);\r\n            });\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n        console.log(\"No snippets found.\");\r\n    }\r\n}\r\nexport default registerHelpers;\r\n//# sourceMappingURL=index.js.map","const distDir = \"./dist/\";\r\nasync function handleSitemap(pages) {\r\n    // iterate through all generated pages and add\r\n    // to the sitemap\r\n    console.log(pages);\r\n}\r\nexport default handleSitemap;\r\n//# sourceMappingURL=index.js.map"],"names":["async","copyDir","src","dest","fs","mkdir","recursive","entries","readdir","withFileTypes","entry","srcPath","path","join","name","destPath","isDirectory","copyFile","moveStaticFiles","allData","registerPages","data","processDir","directory","pages","files","outputDirectory","replace","err","file","ext","parse","page","readFile","frontmatter","rawPage","unified","use","remarkParse","remarkFrontmatter","remarkParseYaml","tree","yaml","children","find","f","type","parsedValue","remarkRehype","allowDangerousHtml","rehypeRaw","rehypeStringify","process","layoutFileName","layout","html","chutneyContent","String","template","Handlebars","compile","route","includes","dataProp","split","slice","prop","sourceData","Array","isArray","result","pathValue","getPropValue","writeFile","console","log","push","title","description","publishedAt","Date","toLocaleLowerCase","steps","value","length","splice","chutney","dataFiles","dataFunc","import","resolve","default","handleData","raw","rawHtmlFile","registerHelper","renderedContent","SafeString","handleComponents","handlePages","handleSitemap","handleStaticFiles"],"mappings":"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"}