{"version":3,"file":"chutney.js","sources":["../dist/static/index.js","../dist/pages/index.js","../dist/index.js","../dist/data/index.js","../dist/components/index.js"],"sourcesContent":["import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nasync function copyDir(src, dest) {\r\n    await fs.mkdir(dest, { recursive: true });\r\n    const entries = await fs.readdir(src, { withFileTypes: true });\r\n    for (const entry of entries) {\r\n        const srcPath = path.join(src, entry.name);\r\n        const destPath = path.join(dest, entry.name);\r\n        entry.isDirectory()\r\n            ? await copyDir(srcPath, destPath)\r\n            : await fs.copyFile(srcPath, destPath);\r\n    }\r\n}\r\nasync function moveStaticFiles() {\r\n    await copyDir(\"./public\", \"./dist\");\r\n}\r\nexport default moveStaticFiles;\r\n//# sourceMappingURL=index.js.map","import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport Handlebars from \"handlebars\";\r\nconst pagesDir = \"./src/pages/\";\r\nconst distDir = \"./dist/\";\r\nlet allData = {};\r\nasync function registerPages(data) {\r\n    allData = data;\r\n    await processDir(pagesDir);\r\n}\r\nasync function processDir(directory) {\r\n    try {\r\n        const files = await fs.readdir(directory);\r\n        const outputDirectory = `${distDir}${directory.replace(pagesDir, \"\")}`;\r\n        // Check to see if the directory exists and create if not.\r\n        try {\r\n            await fs.readdir(outputDirectory);\r\n        }\r\n        catch (err) {\r\n            await fs.mkdir(outputDirectory);\r\n        }\r\n        for (const file of files) {\r\n            const { ext } = path.parse(file);\r\n            if (ext) {\r\n                const html = await fs.readFile(`${directory}${file}`, \"utf-8\");\r\n                const template = Handlebars.compile(html);\r\n                if (file.includes(\"[\")) {\r\n                    const dataProp = outputDirectory.split(\"/\").slice(-2)[0];\r\n                    const prop = file.replace(ext, \"\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n                    const sourceData = allData[dataProp];\r\n                    if (sourceData && Array.isArray(sourceData)) {\r\n                        for (const data of sourceData) {\r\n                            const result = template({ ...allData, ...data });\r\n                            const pathValue = getPropValue(data, prop);\r\n                            try {\r\n                                await fs.readdir(`${outputDirectory}${pathValue}/`);\r\n                            }\r\n                            catch (err) {\r\n                                await fs.mkdir(`${outputDirectory}${pathValue}/`);\r\n                            }\r\n                            await fs.writeFile(`${outputDirectory}${pathValue}/index.html`, result);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const result = template(allData);\r\n                    if (file.replace(ext, \"\").toLocaleLowerCase() !== \"index\") {\r\n                        try {\r\n                            await fs.readdir(`${outputDirectory}${file.replace(ext, \"\")}/`);\r\n                        }\r\n                        catch (err) {\r\n                            await fs.mkdir(`${outputDirectory}${file.replace(ext, \"\")}/`);\r\n                        }\r\n                        await fs.writeFile(`${outputDirectory}${file.replace(ext, \"\")}/index.html`, result);\r\n                    }\r\n                    else {\r\n                        await fs.writeFile(`${outputDirectory}index.html`, result);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                await processDir(`${directory}${file}/`);\r\n            }\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n        console.log(\"No pages found.\");\r\n    }\r\n}\r\nfunction getPropValue(data, prop) {\r\n    const steps = prop.split(\".\");\r\n    let value = data;\r\n    while (steps.length > 0) {\r\n        value = value[steps[0]];\r\n        steps.splice(0, 1);\r\n    }\r\n    return value;\r\n}\r\nexport default registerPages;\r\n//# sourceMappingURL=index.js.map","import handleStaticFiles from \"./static/index.js\";\r\nimport handlePages from \"./pages/index.js\";\r\nimport handleComponents from \"./components/index.js\";\r\nimport handleData from \"./data/index.js\";\r\nexport default async function chutney() {\r\n    // Get data to be used across the entire site.\r\n    const data = await handleData();\r\n    await handleComponents();\r\n    await handlePages(data);\r\n    await handleStaticFiles();\r\n}\r\n//# sourceMappingURL=index.js.map","import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nconst dataDir = \"./src/data/\";\r\nasync function gatherData() {\r\n    const data = {};\r\n    try {\r\n        const dataFiles = await fs.readdir(dataDir);\r\n        for (const file of dataFiles) {\r\n            const { ext } = path.parse(file);\r\n            const dataFunc = (await import(`file://${path.resolve(dataDir)}/${file}`))\r\n                .default;\r\n            data[file.replace(ext, \"\")] = await dataFunc();\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(\"No data found.\");\r\n    }\r\n    return data;\r\n}\r\nexport default gatherData;\r\n//# sourceMappingURL=index.js.map","import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport Handlebars from \"handlebars\";\r\nimport { unified } from \"unified\";\r\nimport remarkParse from \"remark-parse\";\r\nimport remarkFrontmatter from \"remark-frontmatter\";\r\nimport remarkRehype from \"remark-rehype\";\r\nimport rehypeStringify from \"rehype-stringify\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nconst snippetDir = \"./src/components/\";\r\nasync function registerHelpers() {\r\n    try {\r\n        const files = await fs.readdir(snippetDir);\r\n        for (const file of files) {\r\n            const { ext } = path.parse(file);\r\n            const raw = await fs.readFile(`${snippetDir}${file}`, \"utf-8\");\r\n            const rawHtmlFile = await unified()\r\n                .use(remarkParse)\r\n                .use(remarkFrontmatter)\r\n                .use(remarkRehype, { allowDangerousHtml: true })\r\n                .use(rehypeRaw)\r\n                .use(rehypeStringify)\r\n                .process(raw);\r\n            const html = String(rawHtmlFile);\r\n            Handlebars.registerHelper(file.replace(ext, \"\"), (data) => {\r\n                const template = Handlebars.compile(html);\r\n                const renderedContent = template(data);\r\n                return new Handlebars.SafeString(renderedContent);\r\n            });\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n        console.log(\"No snippets found.\");\r\n    }\r\n}\r\nexport default registerHelpers;\r\n//# sourceMappingURL=index.js.map"],"names":["async","copyDir","src","dest","fs","mkdir","recursive","entries","readdir","withFileTypes","entry","srcPath","path","join","name","destPath","isDirectory","copyFile","moveStaticFiles","allData","registerPages","data","processDir","directory","files","outputDirectory","replace","err","file","ext","parse","html","readFile","template","Handlebars","compile","includes","dataProp","split","slice","prop","sourceData","Array","isArray","result","pathValue","getPropValue","writeFile","toLocaleLowerCase","console","log","steps","value","length","splice","chutney","dataFiles","dataFunc","import","resolve","default","handleData","raw","rawHtmlFile","unified","use","remarkParse","remarkFrontmatter","remarkRehype","allowDangerousHtml","rehypeRaw","rehypeStringify","process","String","registerHelper","renderedContent","SafeString","handleComponents","handlePages","handleStaticFiles"],"mappings":"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"}