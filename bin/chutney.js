import a from"fs/promises";import t from"path";import e from"handlebars";import{unified as r}from"unified";import i from"remark-parse";import o from"remark-frontmatter";import c from"remark-rehype";import s from"rehype-stringify";import n from"rehype-raw";async function l(e,r){await a.mkdir(r,{recursive:!0});const i=await a.readdir(e,{withFileTypes:!0});for(const o of i){const i=t.join(e,o.name),c=t.join(r,o.name);o.isDirectory()?await l(i,c):await a.copyFile(i,c)}}async function p(){await l("./public","./dist")}let f={};async function m(a){f=a,await d("./src/pages/")}async function d(r){try{const i=await a.readdir(r),o=`./dist/${r.replace("./src/pages/","")}`;try{await a.readdir(o)}catch(t){await a.mkdir(o)}for(const c of i){const{ext:i}=t.parse(c);if(i){const t=await a.readFile(`${r}${c}`,"utf-8"),s=e.compile(t);if(c.includes("[")){const t=o.split("/").slice(-2)[0],e=c.replace(i,"").replace("[","").replace("]",""),r=f[t];if(r&&Array.isArray(r))for(const t of r){const r=s({...f,...t}),i=w(t,e);try{await a.readdir(`${o}${i}/`)}catch(t){await a.mkdir(`${o}${i}/`)}await a.writeFile(`${o}${i}/index.html`,r)}}else{const t=s(f);if("index"!==c.replace(i,"").toLocaleLowerCase()){try{await a.readdir(`${o}${c.replace(i,"")}/`)}catch(t){await a.mkdir(`${o}${c.replace(i,"")}/`)}await a.writeFile(`${o}${c.replace(i,"")}/index.html`,t)}else await a.writeFile(`${o}index.html`,t)}}else await d(`${r}${c}/`)}}catch(a){console.log(a),console.log("No pages found.")}}function w(a,t){const e=t.split(".");let r=a;for(;e.length>0;)r=r[e[0]],e.splice(0,1);return r}async function u(){const l=await async function(){const e={};try{const r=await a.readdir("./src/data/");for(const a of r){const{ext:r}=t.parse(a),i=(await import(`file://${t.resolve("./src/data/")}/${a}`)).default;e[a.replace(r,"")]=await i()}}catch(a){console.log("No data found.")}return e}();await async function(){try{const l=await a.readdir("./src/components/");for(const p of l){const{ext:l}=t.parse(p),f=await a.readFile(`./src/components/${p}`,"utf-8"),m=await r().use(i).use(o).use(c,{allowDangerousHtml:!0}).use(n).use(s).process(f),d=String(m);e.registerHelper(p.replace(l,""),(a=>{const t=e.compile(d)(a);return new e.SafeString(t)}))}}catch(a){console.log(a),console.log("No snippets found.")}}(),await m(l),await p()}export{u as default};
//# sourceMappingURL=chutney.js.map
